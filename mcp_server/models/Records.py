# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:31:31+00:00

from __future__ import annotations

from typing import Dict, List, Optional

from pydantic import BaseModel, Field

from . import Record


class FieldFormatGetResponse(BaseModel):
    facets: Optional[Dict[str, Dict[str, int]]] = Field(
        None,
        description='Each field you request from the list of facetable fields will be returned as separate elements. Each of those will contain a sorted list of elements that are made up of a value (eg collection name, subject, date) and the number of results associated with that value.  \n',
        examples=[
            {
                'display_collection': {
                    'Canterbury Museum': 39109,
                    'Figure.NZ': 40185,
                    'Napier Public Libraries': 39343,
                },
                'year': {'1997': 4, '1998': 10, '1999': 16},
            }
        ],
    )
    page: Optional[int] = Field(None, description='Current page.', examples=[3])
    per_page: Optional[int] = Field(
        None,
        description='Requested amount of records shown per page of results.',
        examples=[20],
    )
    records: Optional[List[Record]] = None
    request_url: Optional[str] = Field(
        None,
        description='The URL of current page of results.',
        examples=[
            'https://api.digitalnz.org/v3/records.json?per_page=10&facets_per_page=100&facets=category&text=Wainuiomata'
        ],
    )
    result_count: Optional[int] = Field(
        None, description='Total number of matching search results.', examples=[8190]
    )


class FieldFormatGetResponseModel(BaseModel):
    pass
