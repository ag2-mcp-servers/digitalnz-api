# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:31:31+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class CategoryEnum(Enum):
    Newspapers = 'Newspapers'
    Images = 'Images'
    Books = 'Books'
    Articles = 'Articles'
    Journals = 'Journals'
    Archives = 'Archives'
    Audio = 'Audio'
    Other = 'Other'
    Manuscripts = 'Manuscripts'
    Reference_sources = 'Reference sources'
    Research_papers = 'Research papers'
    Videos = 'Videos'
    Music_Score = 'Music Score'
    Groups = 'Groups'
    Data = 'Data'
    Websites = 'Websites'
    Sets = 'Sets'


class CopyrightEnum(Enum):
    All_rights_reserved = 'All rights reserved'
    Some_rights_reserved = 'Some rights reserved'
    No_known_copyright_restrictions = 'No known copyright restrictions'
    Unknown = 'Unknown'


class Location(BaseModel):
    comment: Optional[str] = Field(
        None,
        description='Describes who provided this location metadata.',
        examples=['Location provided by the Alexander Turnbull Library'],
    )
    lat: Optional[float] = Field(None, examples=[-37.508219086])
    lng: Optional[float] = Field(None, examples=[177.1802173])
    placename: Optional[str] = Field(None, examples=['White Island'])


class UsageEnum(Enum):
    All_rights_reserved = 'All rights reserved'
    Share = 'Share'
    Modify = 'Modify'
    Use_commercially = 'Use commercially'
    Unknown = 'Unknown'


class Record(BaseModel):
    category: Optional[List[CategoryEnum]] = Field(
        None,
        description='There will always be at least 1 human-readable category label in this field.',
    )
    collection: Optional[List[str]] = Field(
        None,
        description='In addition to the top level *"display_collection"* above, this field can also contain sub-collections or groupings within the main collection. \n',
    )
    collection_title: Optional[List[str]] = Field(
        None,
        description='For historic reasons this is a duplicate of the previous field ("collection").',
    )
    content_partner: Optional[List[str]] = Field(
        None,
        description='Name of the organisation(s), institution(s), or individual(s) making content available through DigitalNZ. This metadata will be present on all records and is usually the name of the organisation that has agreed to the DigitalNZ Metadata Contribution Terms.',
    )
    copyright: Optional[List[CopyrightEnum]] = Field(
        None,
        description='A copyright statement applying to the object referenced by this record. This field may be empty.',
    )
    created_at: Optional[datetime] = Field(
        None,
        description='The date the record was initially harvested into DigitalNZ.',
        examples=['2012-04-21T05:32:02.000+13:00'],
    )
    creator: Optional[List[str]] = Field(
        None,
        description="The name's of the people, organisations, institutions, services etc. who created the content (eg. the photographer, artist, writer or author).",
    )
    date: Optional[List[str]] = Field(
        None,
        description='Date information associated with this record (e.g. 1996-01-01T00:00:00.000Z). This field may be empty.',
        examples=['1996-01-01T00:00:00.000Z'],
    )
    dc_identifier: Optional[List[str]] = Field(
        None,
        description="Identifiers relating to the content from the content partner's system.",
    )
    description: Optional[str] = Field(
        None, description='Description of the record. Most records have a description.'
    )
    display_collection: Optional[str] = Field(
        None,
        description='The single main collection or website that the item belongs to. This metadata will be present on all records.',
    )
    display_content_partner: Optional[str] = Field(
        None,
        description='The main Content Partner, for cases when there are more than one. This metadata will be present on all records.',
    )
    display_date: Optional[str] = Field(
        None,
        description='Where provided, this field contains a human readable version of the date information.',
        examples=['Circa 1996'],
    )
    id: Optional[int] = Field(
        None,
        description='All records have a unique identifier used within the DigitalNZ system.',
        examples=[1788754],
    )
    landing_url: Optional[str] = Field(
        None,
        description="This field will always contain a URL of the item on the content partner's website.  \n*Note:* Please use the source_url when providing HTML links.\n",
    )
    large_thumbnail_url: Optional[str] = Field(
        None,
        description='URL for a larger thumbnail image with a width of up to 800px. NOTE - the API Terms do not extend rights to the use of images accessable throught the *large_thumbnail_url* field.',
    )
    locations: Optional[List[Location]] = Field(
        None,
        description='Geographical location information including latitude and longitude co-ordinates, text based location information, and details about where the location information comes from (eg. "Location provided by Museum of New Zealand Te Papa Tongarewa")\n',
    )
    primary_collection: Optional[List[str]] = Field(
        None,
        description='In most cases this is the same as *display_collection*, but will occasionally a second value.',
    )
    rights: Optional[str] = Field(
        None,
        description='Rights information. Can be a rights statement explaining the rights of the record or a link to a webpage with more detailed rights information.',
    )
    rights_url: Optional[List[str]] = Field(
        None,
        description='An array of HTTP URLs resolving to a rights statement or terms of use information for the resource.',
    )
    source_url: Optional[str] = Field(
        None,
        description='This URL will always be present and provides a redirect to the landing_url. This link should be used as the main click-through to the content. Passing users through this link allows DNZ to count the number of click-throughs, as well as trigger link-checking activities that help clean up stale links in DigitalNZ.',
        examples=['https://api.digitalnz.org/records/1788754/source'],
    )
    subject: Optional[List[str]] = Field(
        None, description='Keywords about the content.'
    )
    thumbnail_url: Optional[str] = Field(
        None,
        description='URL for a thumbnail image of the content. The size varies depending on what is available but we aim for a width of 250px. This field is mostly populated on records with a \'category\' of \'Images\', but is also sometimes found on others (eg. "Videos").\n',
    )
    title: Optional[str] = Field(
        None,
        description='Title of the record. All records should have a title.',
        examples=['Election night crowd, Wellington, 1931'],
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='The date the record was last updated/re-harvested into DigitalNZ.',
        examples=['2020-12-06T01:36:37.359+13:00'],
    )
    usage: Optional[List[UsageEnum]] = Field(
        None,
        description='This field is always present and contains human-understandable information about how the item may be used based on its copyright/license.',
    )


class AndCategory(Enum):
    Newspapers = 'Newspapers'
    Images = 'Images'
    Books = 'Books'
    Articles = 'Articles'
    Journals = 'Journals'
    Archives = 'Archives'
    Audio = 'Audio'
    Other = 'Other'
    Manuscripts = 'Manuscripts'
    Reference_sources = 'Reference sources'
    Research_papers = 'Research papers'
    Videos = 'Videos'
    Music_Score = 'Music Score'
    Groups = 'Groups'
    Data = 'Data'
    Websites = 'Websites'
    Sets = 'Sets'


class AndUsage(Enum):
    Share = 'Share'
    Modify = 'Modify'
    Use_commercially = 'Use commercially'
    All_rights_reserved = 'All rights reserved'
    Unknown = 'Unknown'


class AndHasLargeThumbnailUrl(Enum):
    Y = 'Y'


class AndHasLatLng(Enum):
    boolean_True = True
    boolean_False = False


class Sort(Enum):
    syndication_date = 'syndication_date'
    date = 'date'


class Direction(Enum):
    asc = 'asc'
    desc = 'desc'


class Facet(Enum):
    category = 'category'
    content_partner = 'content_partner'
    display_collection = 'display_collection'
    collection = 'collection'
    creator = 'creator'
    placename = 'placename'
    date = 'date'
    year = 'year'
    decade = 'decade'
    century = 'century'
    language = 'language'
    rights = 'rights'
    usage = 'usage'
    copyright = 'copyright'
    subject = 'subject'
    format = 'format'
    dc_type = 'dc_type'


class Format(Enum):
    json = 'json'
    xml = 'xml'


class Facets(RootModel[List[Facet]]):
    root: List[Facet]
